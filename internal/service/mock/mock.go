// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	entity "user-balance-service/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuth) CreateUser(arg0 context.Context, arg1 entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuth)(nil).CreateUser), arg0, arg1)
}

// GenerateToken mocks base method.
func (m *MockAuth) GenerateToken(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthMockRecorder) GenerateToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuth)(nil).GenerateToken), arg0, arg1, arg2)
}

// ParseToken mocks base method.
func (m *MockAuth) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuth)(nil).ParseToken), token)
}

// MockAccount is a mock of Account interface.
type MockAccount struct {
	ctrl     *gomock.Controller
	recorder *MockAccountMockRecorder
}

// MockAccountMockRecorder is the mock recorder for MockAccount.
type MockAccountMockRecorder struct {
	mock *MockAccount
}

// NewMockAccount creates a new mock instance.
func NewMockAccount(ctrl *gomock.Controller) *MockAccount {
	mock := &MockAccount{ctrl: ctrl}
	mock.recorder = &MockAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccount) EXPECT() *MockAccountMockRecorder {
	return m.recorder
}

// ConvertToCurrency mocks base method.
func (m *MockAccount) ConvertToCurrency(ctx context.Context, currencyTo string, amount float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertToCurrency", ctx, currencyTo, amount)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertToCurrency indicates an expected call of ConvertToCurrency.
func (mr *MockAccountMockRecorder) ConvertToCurrency(ctx, currencyTo, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToCurrency", reflect.TypeOf((*MockAccount)(nil).ConvertToCurrency), ctx, currencyTo, amount)
}

// CreateAccount mocks base method.
func (m *MockAccount) CreateAccount(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountMockRecorder) CreateAccount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccount)(nil).CreateAccount), ctx)
}

// DeleteAccount mocks base method.
func (m *MockAccount) DeleteAccount(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAccountMockRecorder) DeleteAccount(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccount)(nil).DeleteAccount), ctx, id)
}

// GetAccount mocks base method.
func (m *MockAccount) GetAccount(ctx context.Context, id int) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, id)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountMockRecorder) GetAccount(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccount)(nil).GetAccount), ctx, id)
}

// MakeDeposit mocks base method.
func (m *MockAccount) MakeDeposit(ctx context.Context, id, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeDeposit", ctx, id, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeDeposit indicates an expected call of MakeDeposit.
func (mr *MockAccountMockRecorder) MakeDeposit(ctx, id, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDeposit", reflect.TypeOf((*MockAccount)(nil).MakeDeposit), ctx, id, amount)
}

// TransferMoney mocks base method.
func (m *MockAccount) TransferMoney(ctx context.Context, idFrom, idTo, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferMoney", ctx, idFrom, idTo, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferMoney indicates an expected call of TransferMoney.
func (mr *MockAccountMockRecorder) TransferMoney(ctx, idFrom, idTo, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferMoney", reflect.TypeOf((*MockAccount)(nil).TransferMoney), ctx, idFrom, idTo, amount)
}

// WriteOff mocks base method.
func (m *MockAccount) WriteOff(ctx context.Context, id, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteOff", ctx, id, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteOff indicates an expected call of WriteOff.
func (mr *MockAccountMockRecorder) WriteOff(ctx, id, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteOff", reflect.TypeOf((*MockAccount)(nil).WriteOff), ctx, id, amount)
}

// MockHistory is a mock of History interface.
type MockHistory struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryMockRecorder
}

// MockHistoryMockRecorder is the mock recorder for MockHistory.
type MockHistoryMockRecorder struct {
	mock *MockHistory
}

// NewMockHistory creates a new mock instance.
func NewMockHistory(ctrl *gomock.Controller) *MockHistory {
	mock := &MockHistory{ctrl: ctrl}
	mock.recorder = &MockHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistory) EXPECT() *MockHistoryMockRecorder {
	return m.recorder
}

// Pagination mocks base method.
func (m *MockHistory) Pagination(ctx context.Context, limit int, param string, accountId int) ([]entity.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pagination", ctx, limit, param, accountId)
	ret0, _ := ret[0].([]entity.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pagination indicates an expected call of Pagination.
func (mr *MockHistoryMockRecorder) Pagination(ctx, limit, param, accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pagination", reflect.TypeOf((*MockHistory)(nil).Pagination), ctx, limit, param, accountId)
}

// SaveHistory mocks base method.
func (m *MockHistory) SaveHistory(ctx context.Context, input entity.History) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHistory", ctx, input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveHistory indicates an expected call of SaveHistory.
func (mr *MockHistoryMockRecorder) SaveHistory(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHistory", reflect.TypeOf((*MockHistory)(nil).SaveHistory), ctx, input)
}

// ShowAll mocks base method.
func (m *MockHistory) ShowAll(ctx context.Context) ([]entity.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowAll", ctx)
	ret0, _ := ret[0].([]entity.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowAll indicates an expected call of ShowAll.
func (mr *MockHistoryMockRecorder) ShowAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowAll", reflect.TypeOf((*MockHistory)(nil).ShowAll), ctx)
}

// ShowById mocks base method.
func (m *MockHistory) ShowById(ctx context.Context, id int) ([]entity.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowById", ctx, id)
	ret0, _ := ret[0].([]entity.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowById indicates an expected call of ShowById.
func (mr *MockHistoryMockRecorder) ShowById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowById", reflect.TypeOf((*MockHistory)(nil).ShowById), ctx, id)
}

// ShowSorted mocks base method.
func (m *MockHistory) ShowSorted(ctx context.Context, sortType string, accountId int) ([]entity.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowSorted", ctx, sortType, accountId)
	ret0, _ := ret[0].([]entity.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowSorted indicates an expected call of ShowSorted.
func (mr *MockHistoryMockRecorder) ShowSorted(ctx, sortType, accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowSorted", reflect.TypeOf((*MockHistory)(nil).ShowSorted), ctx, sortType, accountId)
}

// MockAuthRepo is a mock of AuthRepo interface.
type MockAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepoMockRecorder
}

// MockAuthRepoMockRecorder is the mock recorder for MockAuthRepo.
type MockAuthRepoMockRecorder struct {
	mock *MockAuthRepo
}

// NewMockAuthRepo creates a new mock instance.
func NewMockAuthRepo(ctrl *gomock.Controller) *MockAuthRepo {
	mock := &MockAuthRepo{ctrl: ctrl}
	mock.recorder = &MockAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepo) EXPECT() *MockAuthRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthRepo) CreateUser(arg0 context.Context, arg1 entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthRepoMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthRepo)(nil).CreateUser), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockAuthRepo) GetUser(arg0 context.Context, arg1, arg2 string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthRepoMockRecorder) GetUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuthRepo)(nil).GetUser), arg0, arg1, arg2)
}

// MockAccountRepo is a mock of AccountRepo interface.
type MockAccountRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepoMockRecorder
}

// MockAccountRepoMockRecorder is the mock recorder for MockAccountRepo.
type MockAccountRepoMockRecorder struct {
	mock *MockAccountRepo
}

// NewMockAccountRepo creates a new mock instance.
func NewMockAccountRepo(ctrl *gomock.Controller) *MockAccountRepo {
	mock := &MockAccountRepo{ctrl: ctrl}
	mock.recorder = &MockAccountRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepo) EXPECT() *MockAccountRepoMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountRepo) CreateAccount(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountRepoMockRecorder) CreateAccount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountRepo)(nil).CreateAccount), ctx)
}

// DeleteAccount mocks base method.
func (m *MockAccountRepo) DeleteAccount(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAccountRepoMockRecorder) DeleteAccount(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccountRepo)(nil).DeleteAccount), ctx, id)
}

// GetAccount mocks base method.
func (m *MockAccountRepo) GetAccount(ctx context.Context, id int) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, id)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountRepoMockRecorder) GetAccount(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountRepo)(nil).GetAccount), ctx, id)
}

// MakeDeposit mocks base method.
func (m *MockAccountRepo) MakeDeposit(ctx context.Context, id, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeDeposit", ctx, id, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeDeposit indicates an expected call of MakeDeposit.
func (mr *MockAccountRepoMockRecorder) MakeDeposit(ctx, id, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDeposit", reflect.TypeOf((*MockAccountRepo)(nil).MakeDeposit), ctx, id, amount)
}

// TransferMoney mocks base method.
func (m *MockAccountRepo) TransferMoney(ctx context.Context, idFrom, idTo, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferMoney", ctx, idFrom, idTo, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferMoney indicates an expected call of TransferMoney.
func (mr *MockAccountRepoMockRecorder) TransferMoney(ctx, idFrom, idTo, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferMoney", reflect.TypeOf((*MockAccountRepo)(nil).TransferMoney), ctx, idFrom, idTo, amount)
}

// WriteOff mocks base method.
func (m *MockAccountRepo) WriteOff(ctx context.Context, id, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteOff", ctx, id, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteOff indicates an expected call of WriteOff.
func (mr *MockAccountRepoMockRecorder) WriteOff(ctx, id, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteOff", reflect.TypeOf((*MockAccountRepo)(nil).WriteOff), ctx, id, amount)
}

// MockHistoryRepo is a mock of HistoryRepo interface.
type MockHistoryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryRepoMockRecorder
}

// MockHistoryRepoMockRecorder is the mock recorder for MockHistoryRepo.
type MockHistoryRepoMockRecorder struct {
	mock *MockHistoryRepo
}

// NewMockHistoryRepo creates a new mock instance.
func NewMockHistoryRepo(ctrl *gomock.Controller) *MockHistoryRepo {
	mock := &MockHistoryRepo{ctrl: ctrl}
	mock.recorder = &MockHistoryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryRepo) EXPECT() *MockHistoryRepoMockRecorder {
	return m.recorder
}

// Pagination mocks base method.
func (m *MockHistoryRepo) Pagination(ctx context.Context, limit int, param string, accountId int) ([]entity.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pagination", ctx, limit, param, accountId)
	ret0, _ := ret[0].([]entity.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pagination indicates an expected call of Pagination.
func (mr *MockHistoryRepoMockRecorder) Pagination(ctx, limit, param, accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pagination", reflect.TypeOf((*MockHistoryRepo)(nil).Pagination), ctx, limit, param, accountId)
}

// SaveHistory mocks base method.
func (m *MockHistoryRepo) SaveHistory(ctx context.Context, input entity.History) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHistory", ctx, input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveHistory indicates an expected call of SaveHistory.
func (mr *MockHistoryRepoMockRecorder) SaveHistory(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHistory", reflect.TypeOf((*MockHistoryRepo)(nil).SaveHistory), ctx, input)
}

// ShowAll mocks base method.
func (m *MockHistoryRepo) ShowAll(ctx context.Context) ([]entity.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowAll", ctx)
	ret0, _ := ret[0].([]entity.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowAll indicates an expected call of ShowAll.
func (mr *MockHistoryRepoMockRecorder) ShowAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowAll", reflect.TypeOf((*MockHistoryRepo)(nil).ShowAll), ctx)
}

// ShowById mocks base method.
func (m *MockHistoryRepo) ShowById(ctx context.Context, id int) ([]entity.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowById", ctx, id)
	ret0, _ := ret[0].([]entity.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowById indicates an expected call of ShowById.
func (mr *MockHistoryRepoMockRecorder) ShowById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowById", reflect.TypeOf((*MockHistoryRepo)(nil).ShowById), ctx, id)
}

// ShowSorted mocks base method.
func (m *MockHistoryRepo) ShowSorted(ctx context.Context, sortType string, accountId int) ([]entity.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowSorted", ctx, sortType, accountId)
	ret0, _ := ret[0].([]entity.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowSorted indicates an expected call of ShowSorted.
func (mr *MockHistoryRepoMockRecorder) ShowSorted(ctx, sortType, accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowSorted", reflect.TypeOf((*MockHistoryRepo)(nil).ShowSorted), ctx, sortType, accountId)
}

// MockRedisCache is a mock of RedisCache interface.
type MockRedisCache struct {
	ctrl     *gomock.Controller
	recorder *MockRedisCacheMockRecorder
}

// MockRedisCacheMockRecorder is the mock recorder for MockRedisCache.
type MockRedisCacheMockRecorder struct {
	mock *MockRedisCache
}

// NewMockRedisCache creates a new mock instance.
func NewMockRedisCache(ctrl *gomock.Controller) *MockRedisCache {
	mock := &MockRedisCache{ctrl: ctrl}
	mock.recorder = &MockRedisCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisCache) EXPECT() *MockRedisCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRedisCache) Get(ctx context.Context, key string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRedisCacheMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisCache)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockRedisCache) Set(ctx context.Context, key string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRedisCacheMockRecorder) Set(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisCache)(nil).Set), ctx, key, value)
}

// MockConverterWEBAPI is a mock of ConverterWEBAPI interface.
type MockConverterWEBAPI struct {
	ctrl     *gomock.Controller
	recorder *MockConverterWEBAPIMockRecorder
}

// MockConverterWEBAPIMockRecorder is the mock recorder for MockConverterWEBAPI.
type MockConverterWEBAPIMockRecorder struct {
	mock *MockConverterWEBAPI
}

// NewMockConverterWEBAPI creates a new mock instance.
func NewMockConverterWEBAPI(ctrl *gomock.Controller) *MockConverterWEBAPI {
	mock := &MockConverterWEBAPI{ctrl: ctrl}
	mock.recorder = &MockConverterWEBAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConverterWEBAPI) EXPECT() *MockConverterWEBAPIMockRecorder {
	return m.recorder
}

// ConvertToCurrency mocks base method.
func (m *MockConverterWEBAPI) ConvertToCurrency(ctx context.Context, currencyTo string, amount float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertToCurrency", ctx, currencyTo, amount)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertToCurrency indicates an expected call of ConvertToCurrency.
func (mr *MockConverterWEBAPIMockRecorder) ConvertToCurrency(ctx, currencyTo, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToCurrency", reflect.TypeOf((*MockConverterWEBAPI)(nil).ConvertToCurrency), ctx, currencyTo, amount)
}
